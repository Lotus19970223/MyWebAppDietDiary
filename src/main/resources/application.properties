
# 接続情報

#https://devcenter.heroku.com/ja/articles/connecting-to-relational-databases-on-heroku-with-java
#↑のものを使用
spring.datasource.url=${JDBC_DATASOURCE_URL}
spring.datasource.username=${JDBC_DATASOURCE_USERNAME}
spring.datasource.password=${JDBC_DATASOURCE_PASSWORD}

#https://qiita.com/thankkingdom/items/de5e74e3615818c65f1d
#↑のものを使用
# SQLログ出力
logging.level.org.hibernate.SQL=debug

# バインドパラメータ出力
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=trace
logging.level.org.hibernate.type.EnumType=trace

#https://data.heroku.com/datastores/e5b65b4b-9d94-4992-9a36-90565b3e3ef8#administration
#↑のものを使用
#spring.datasource.driverClassName=org.postgresql.Driver
#spring.datasource.maxActive=10
#spring.datasource.maxIdle=5
#spring.datasource.minIdle=2
#spring.datasource.initialSize=5
#spring.datasource.removeAbandoned=true



#spring.datasource.url=postgres://qpodycginimzdl:88ccf21f0997a530fa34b208f951ac82ab2c19cd22441dad3083d0754719cc7f@ec2-54-211-255-161.compute-1.amazonaws.com:5432/d3n07ibp6qm3vh
##spring.datasource.username=${POSTGRES_USER}
##spring.datasource.password=${POSTGRES_PASS}
#server.port=${PORT:5000}

#spring.datasource.url=jdbc:postgresql://localhost:5432/diet_diary_db
#spring.datasource.username=postgres
#spring.datasource.password=postgres

#https://data.heroku.com/datastores/e5b65b4b-9d94-4992-9a36-90565b3e3ef8#administration
#↑のものを使用
#spring.datasource.url=jdbc:postgresql://ec2-54-211-255-161.compute-1.amazonaws.com:5432/diet_diary_db
#spring.datasource.username=qpodycginimzdl
#spring.datasource.password=88ccf21f0997a530fa34b208f951ac82ab2c19cd22441dad3083d0754719cc7f
#server.port=${PORT:5000}

#https://github.com/heroku/java-getting-started/blob/main/src/main/resources/application.properties
#↑のものを使用
#spring.datasource.url: ${JDBC_DATABASE_URL:}
#spring.datasource.hikari.connection-timeout=30000
#spring.datasource.hikari.maximum-pool-size=10
#
#spring.thymeleaf.mode=HTML
#
#logging.level.org.springframework=INFO
#
#spring.profiles.active=production
#
#server.port=${PORT:5000}


# ----以下はお好みで設定してください。----

# 発行されたSQL文をログに残す
#spring.jpa.show-sql=true
# テーブルが存在しなかった場合、作成する
#spring.jpa.hibernate.ddl-auto=update
